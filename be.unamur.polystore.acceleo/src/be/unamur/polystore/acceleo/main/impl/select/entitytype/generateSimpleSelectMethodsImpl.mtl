[comment encoding = UTF-8 /]
[module generateSimpleSelectMethodsImpl('http://www.unamur.be/polystore/Pml')]
[import be::unamur::polystore::acceleo::main::mappingrules::util /]
[import be::unamur::polystore::acceleo::main::util /]
[import be::unamur::polystore::acceleo::main::impl::select::entitytype::generateSimpleSelectFromGivenRelationalTable /]
[import be::unamur::polystore::acceleo::main::impl::select::entitytype::generateSimpleSelectFromGivenDocumentCollection /]
[import be::unamur::polystore::acceleo::main::impl::select::entitytype::generateSelectKeyValue /]
[import be::unamur::polystore::acceleo::main::impl::select::entitytype::generateSimpleSelectFromGivenColumnTable /]


[comment get{E}List({E)AttributeCondition /]

[template public generateSimpleSelectMethodsImpl(entityType: EntityType, conceptualSchema: ConceptualSchema)]{
	StopWatch stopwatch = new StopWatch();
	MutableBoolean refilterFlag = new MutableBoolean(false);
	List<Dataset<[entityType.name.toUpperFirst() /]>> datasets = new ArrayList<Dataset<[entityType.name.toUpperFirst() /]>>();
	Dataset<[entityType.name.toUpperFirst()/]> d = null;
	[for (struct: AbstractPhysicalStructure | getConcernedPhysicalStructures(entityType, entityType.ancestors(Domainmodel)->first()))]
	[if (struct.oclIsTypeOf(pml::EmbeddedObject) = false) and (struct.oclIsTypeOf(pml::KVComplexField) = false)]
	[for (db: Database | getConcernedDatabases(struct, entityType.ancestors(Domainmodel)->first()))]
	d = get[entityType.name.toUpperFirst() /]ListIn[struct.name.toUpperFirst()/]From[db.name.toUpperFirst() /](condition, refilterFlag);
	if(d != null)
		datasets.add(d);
	[/for]
	[/if]
	[/for]
	
	if(datasets.size() == 0)
		return null;

	d = datasets.get(0);
	if(datasets.size() > 1) {
		d=fullOuterJoins[entityType.name.toUpperFirst() /](datasets);
	}
	if(refilterFlag.booleanValue())
		d = d.filter((FilterFunction<[entityType.name.toUpperFirst() /]>) r -> condition == null || condition.evaluate(r));
	[comment 
	 This drop duplicates is necessary when readin data from a key value db, with key structures such as PRODUCT:id:REVIEW:reviewid . /]
	[if (entityType.identifier.oclIsUndefined() = true)] 
	d = d.dropDuplicates();
	[else]
	d = d.dropDuplicates(new String[ '[' /][ ']' /] {[if (entityType.identifier.oclIsUndefined() = false)][for (attr : Attribute | entityType.identifier.attributes) separator(',')]"[attr.name/]"[/for][/if]});
	[/if]
	logger.info("Execution time in seconds : ", stopwatch.getElapsedTimeInSeconds());
	return d;
}[/template]


[comment List<Customer> getCustomerListInCustomerFromMyMariabDB(Condition) /]

[template public generateSimpleSelectFromGivenDatabase(ent : EntityType, struct: AbstractPhysicalStructure, db : Database)]{
[if (isRelational(db.dbType))]
[generateSimpleSelectFromGivenRelationalTable(ent, struct, db) /]
[elseif (db.dbType = pml::DatabaseType::MONGODB)]
[generateSimpleSelectFromGivenDocumentCollection(ent, struct, db) /]
[elseif (db.dbType = pml::DatabaseType::REDIS)]
[generateSelectKeyValue(ent, struct.oclAsType(pml::KeyValuePair), db) /]
[elseif (db.dbType = pml::DatabaseType::CASSANDRA)]
[generateSimpleSelectFromGivenColumnTable(ent, struct, db) /]
[else]return null;
[/if]	
	
}[/template]





