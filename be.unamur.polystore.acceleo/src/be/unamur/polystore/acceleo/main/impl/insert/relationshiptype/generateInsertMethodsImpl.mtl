[comment encoding = UTF-8 /]
[module generateInsertMethodsImpl('http://www.unamur.be/polystore/Pml')]
[import be::unamur::polystore::acceleo::main::mappingrules::util /]
[import be::unamur::polystore::acceleo::main::util /]
[import be::unamur::polystore::acceleo::main::impl::insert::entitytype::generateSimpleInsertMethodsImpl/]

[template public insertRImpl(rel: RelationshipType)]{
	//Link entities in join structures.
	[for (struct : AbstractPhysicalStructure | getJoinPhysicalStructureOfRelation(rel))]
	[for (db: Database | getConcernedDatabases(struct, struct.ancestors(Domainmodel)->first()))]
	insert[rel.name.toUpperFirst()/]InJoinStruct[struct.name.toUpperFirst()/]In[db.name.toUpperFirst()/]([rel.name.toLowerFirst()/]);
	[/for]
	[/for]
	// Update embedded structures mapped to non mandatory roles.
	[for (struct : AbstractPhysicalStructure | getEmbeddedPhysicalStructureOfRelation(rel))]
	[for (db: Database | getConcernedDatabases(struct, struct.ancestors(Domainmodel)->first()))]
	insert[rel.name.toUpperFirst()/]InEmbeddedStruct[struct.name.toUpperFirst()/]In[db.name.toUpperFirst()/]([rel.name.toLowerFirst()/]);
	[/for]
	[/for]
	// Update ref fields mapped to non mandatory roles. 
	[for (struct : AbstractPhysicalStructure | getRefPhysicalStructureOfRelation(rel))]
	[for (db: Database | getConcernedDatabases(struct, struct.ancestors(Domainmodel)->first()))]
	insert[rel.name.toUpperFirst()/]InRefStruct[struct.name.toUpperFirst()/]In[db.name.toUpperFirst()/]([rel.name.toLowerFirst()/]);
	[/for]
	[/for]
}[/template]

[template public insertRInJoinStruct(rel: RelationshipType, struct : AbstractPhysicalStructure, db : Database)]{
 	// Rel '[rel.name/]' Insert in join structure '[struct.name/]'
	
[for (rolerel : Role | rel.roles)]
	[let entityType : EntityType = rolerel.entity]
	[entityType.name.toUpperFirst()/] [rolerel.name.toLowerFirst()/]_[entityType.name.toLowerFirst()/] = [rel.name.toLowerFirst()/].get[rolerel.name.toUpperFirst()/]();
[/let]
[/for]
[if (struct.oclIsTypeOf(Table))]
[comment]Normal fields [/comment]
	List<String> columns = new ArrayList<>();
	List<Object> values = new ArrayList<>();
	List<List<Object>> rows = new ArrayList<>();
[for (field : PhysicalField | struct.oclAsType(Table).columns)]
	[if (field.oclIsTypeOf(ShortField))]
		[let attr : Attribute = getMappedAttributes(field, rel, rel.getMappingRules())->any(true)]
			[if (attr.oclIsUndefined()=false)]
	columns.add("[getPhysicalName(field)/]");
	values.add([rel.name.toLowerFirst()/].get[attr.name.toUpperFirst()/]());
			[/if]
		[/let] 
	[/if]
	[if (field.oclIsTypeOf(LongField))]
		[comment LongField with only one component and is BracketsField /]
		[if (field.oclAsType(LongField).pattern->size()=1 and field.oclAsType(LongField).pattern->any(true).oclIsTypeOf(BracketsField))]
			[let brackets : BracketsField = field.oclAsType(LongField).pattern->any(true).oclAsType(BracketsField)]
				[let attr : Attribute = getMappedAttributes(field, rel, rel.getMappingRules())->any(true)]
				[if (attr.oclIsUndefined()=false)]
	columns.add("[getPhysicalName(field)/]");
	values.add([rel.name.toLowerFirst()/].get[attr.name.toUpperFirst()/]());
				[/if]
				[/let] 
			[/let]
		[else]
			[if (field.oclAsType(LongField).pattern->filter(BracketsField)->exists(b |getMappedAttributes(b, rel, rel.getMappingRules())->size()=0)=false)]
				[comment All BracketsField are mapped to the corresponding entity or composed of only one Terminal expression/]
				[comment LongField is composed of component, therefore can only be StringType /]
	String value_[getPhysicalName(field)/] = "";
				[for (component : TerminalExpression | field.oclAsType(LongField).pattern)]
					[if (component.oclIsTypeOf(BracketsField))]
						[let attr : Attribute = getMappedAttributes(component.oclAsType(BracketsField), rel, rel.getMappingRules())->any(true)]
	value_[getPhysicalName(field)/] += [rel.name.toLowerFirst()/].get[attr.name.toUpperFirst()/]();
						[/let]
					[else]
	value_[getPhysicalName(field)/] += "[component.literal/]";
					[/if]
				[/for]
	columns.add("[getPhysicalName(field)/]");
	values.add(value_[getPhysicalName(field)/]);
			[/if]
		[/if]
	[/if]
[/for]
[comment]	Reference fields [/comment]
	[for (ref : Reference | getRefOfPhysicalStructure(struct))]
		[let role : Role = getMappedRoleOfReference(ref)]
	// Role in join structure 
	columns.add("[ref.sourceField->any(true).oclAsType(PhysicalField).getPhysicalName()/]");
	Object [role.entity.name.toLowerFirst()/]Id = [role.name.toLowerFirst()/]_[role.entity.name.toLowerFirst()/].get[getMappedAttributeOfFieldInStructure(ref.targetField->any(true).oclAsType(PhysicalField), ref.targetField->any(true).oclAsType(PhysicalField).getAbstractPhysicalStructureNotEmbeddedObject()).name.toUpperFirst()/]();
	values.add([role.entity.name.toLowerFirst()/]Id);
	[/let]
	[/for]
	rows.add(values);
	DBConnectionMgr.insertInTable(columns, rows, "[struct.name/]", "[db.name/]"); [comment]In join structure so no existing line should exist. We insert[/comment]					
	return true;
[/if]
[if (struct.oclIsTypeOf(pml::Collection))]
[comment]//Docdb ref support.  [/comment]
// In insertRefStruct in MongoDB
Bson filter = new Document();
Bson updateOp;
List<Document> docsList = new ArrayList();
Document doc = new Document();
String roleEntityField;
java.util.Map<String, java.util.Map<String, String>> longFieldValues = new java.util.HashMap<String, java.util.Map<String, String>>();

	[comment]Normal fields [/comment]
	[for (attr : Attribute | rel.attributes)]
		[let field : PhysicalField = getMappedPhysicalField(attr, struct, db, db.getMappingRules())]
		[if (field <> null)]
			[if (field.ancestors(LongField) -> size() = 0)]
			[comment]Short fields [/comment]
doc.append("[getPhysicalName(field)/]", [rel.name.toLowerFirst()/].get[attr.name.toUpperFirst()/]());
			[else]
			[comment]Long fields [/comment]
java.util.Map<String, String> longFieldValue = longFieldValues.get("[getPhysicalName(field.ancestors(LongField) -> first().oclAsType(LongField))/]");
if(longFieldValue == null) {
	longFieldValue = new java.util.HashMap<String, String>();
	longFieldValues.put("[getPhysicalName(field.ancestors(LongField) -> first().oclAsType(LongField))/]", longFieldValue);
}
longFieldValue.put("[field.oclAsType(BracketsField).name/]", (value == null ? null : value.toString()));
			[/if]
		[/if]
		[/let]
	[/for]
for(java.util.Map.Entry<String, java.util.Map<String, String>> entry : longFieldValues.entrySet()) {
	String longField = entry.getKey();
	java.util.Map<String, String> values = entry.getValue();
	[for (lf : LongField | struct.getDescendentsLongField())]
	if(longField.equals("[getPhysicalName(lf)/]")) {
		String value;
		String v;
		[for (expr : TerminalExpression | lf.pattern)]
			[if (expr.oclIsTypeOf(pml::BracketsField))]
		v = values.get("[expr.oclAsType(BracketsField).name/]");
			[else]
		v = "[expr.literal/]";
			[/if]
			[if (i = 1)]
		value = v;
			[else]
		value += v;
			[/if]
		[/for]

		String fieldName = "[getPhysicalName(lf)/]";
		doc.append(fieldName, value);
	}
	[/for]
}	

[comment]	Reference fields [/comment]
		[for (ref : Reference | getRefOfPhysicalStructure(struct))]
			[let role : Role = getMappedRoleOfReference(ref)]
// Ref '[ref.name/]' mapped to role '[role.name/]'
doc.append("[ref.sourceField->any(true).oclAsType(PhysicalField).getPhysicalName()/]",[role.name.toLowerFirst()/]_[role.entity.name.toLowerFirst()/].get[getMappedAttributeOfFieldInStructure(ref.targetField->any(true).oclAsType(PhysicalField), ref.targetField->any(true).oclAsType(PhysicalField).getAbstractPhysicalStructureNotEmbeddedObject()).name.toUpperFirst()/]());
			[/let]
		[/for]
	docsList.add(doc);
	DBConnectionMgr.insertMany(docsList, "[struct.name/]", "[db.name/]");
	return true;
[/if]
[if (struct.oclIsTypeOf(KeyValuePair))]
throw new UnsupportedOperationException("Not Implemented yet");
[/if]

}[/template]

[template public insertRInEmbeddedStruct(rel: RelationshipType, struct : AbstractPhysicalStructure, db : Database)]{
 	// Rel '[rel.name/]' Insert in embedded structure '[struct.name/]'

	[if (struct.oclIsTypeOf(pml::Collection))]
	[for (rolerel : Role | rel.roles)]
	[let entityType : EntityType = rolerel.entity]
	[entityType.name.toUpperFirst()/] [entityType.name.toLowerFirst()/] = [rel.name.toLowerFirst()/].get[rolerel.name.toUpperFirst()/]();
	[/let]
	[/for]
	Bson filter= new Document();
	Bson updateOp;
	String addToSet;
	List<String> fieldName= new ArrayList();
	List<Bson> arrayFilterCond = new ArrayList();
	[for (rolerel : Role | rel.roles)]
	[let entityType : EntityType = rolerel.entity]
		[for (field : PhysicalField | struct.oclAsType(pml::Collection).fields)]
			[if (field.isMappedToGivenRole(rolerel))]
	[generateDocument(getOppositeRoleInBinaryRel(rolerel).entity,field.oclAsType(EmbeddedObject).fields, getPhysicalName(field),1,1,true)/]
				[if (field.eContainer(EmbeddedObject).oclIsUndefined()=false)]
	[ascendInStruct(field.eContainer(EmbeddedObject), getMappedRoleOfPhysicalField(field),struct, db, 0, entityType)/]
	fieldName.add("[getPhysicalName(field)/]");
	addToSet = String.join(".",fieldName);
	updateOp = addToSet(addToSet,doc[getPhysicalName(field)/]_1);
	DBConnectionMgr.upsertMany(filter, updateOp, arrayFilterCond, "[struct.name/]", "[db.name/]");
				[else] 
	// level 1 ascending
	[if (rel.attributes->notEmpty())] // Rel attributes. Only simple ones. [/if] 
					[for (relattr : Attribute | rel.attributes)]
					[let fieldrel : PhysicalField = getMappedPhysicalField(relattr, struct, db, entityType.getMappingRules())]
						[if (fieldrel.oclIsTypeOf(ShortField))]
	doc[getPhysicalName(field)/]_1.append("[getPhysicalName(fieldrel)/]",[rel.name.toLowerFirst()/].get[relattr.name.toUpperFirst()/]());
						[else]
[comment]TODO LongField					[/comment]
	throw new UnsupportedOperationException("Insert of relationship type attributes longField not implemented yet.");
						[/if]
					[/let]
					[/for]
					[for (attr : Attribute | rolerel.entity.identifier.attributes)]
						[if (i=1)]
	filter = eq("[getPhysicalName(getMappedPhysicalField(attr, struct, db, entityType.getMappingRules()))/]",[rolerel.entity.name.toLowerFirst()/].get[attr.name.toUpperFirst()/]());
						[else]
	filter = and(filter,eq("[getPhysicalName(getMappedPhysicalField(attr, struct, db, entityType.getMappingRules()))/]",[rolerel.entity.name.toLowerFirst()/].get[attr.name.toUpperFirst()/]());
						[/if]
					[/for]
	updateOp = addToSet("[field.getPhysicalName()/]", doc[getPhysicalName(field)/]_1);
	DBConnectionMgr.update(filter, updateOp, "[struct.name/]", "[db.name/]");					
				[/if]
			[else]
[comment]TODO Handle deep embedded of role in document
Fields of first level does not contain mapped embedded object to given rel roles. We need to go deeper. Change the algorithm to make a recursive descending in struct .	[/comment]
			[/if]
		[/for]
	[/let]
	[/for]
	[/if]
	return true;
}[/template]

[template public insertRInRefStruct(rel: RelationshipType, struct : AbstractPhysicalStructure, db : Database)]{
 	// Rel '[rel.name/]' Insert in reference structure '[struct.name/]'
	[for (rolerel : Role | rel.roles)]
	[let entityType : EntityType = rolerel.entity]
	[entityType.name.toUpperFirst()/] [entityType.name.toLowerFirst()/][rolerel.name.toUpperFirst()/] = [rel.name.toLowerFirst()/].get[rolerel.name.toUpperFirst()/]();
	[/let]
	[/for]

	[if (struct.oclIsTypeOf(Table))]
	List<String> columns = new ArrayList<>();
	List<Object> values = new ArrayList<>();
	String filtercolumn;
	Object filtervalue;
		[for (ref : Reference | getRefOfPhysicalStructure(struct))]
		[let role : Role = getMappedRoleOfReference(ref)]
			[if (role.getRelationShipType()=rel)] 
	columns.add("[ref.sourceField->any(true).oclAsType(PhysicalField).getPhysicalName()/]");
	values.add([getOppositeRoleInBinaryRel(role).entity.name.toLowerFirst()/][getOppositeRoleInBinaryRel(role).name.toUpperFirst()/]==null?null:[getOppositeRoleInBinaryRel(role).entity.name.toLowerFirst()/][getOppositeRoleInBinaryRel(role).name.toUpperFirst()/].get[getMappedAttributeOfFieldInStructure(ref.targetField->any(true).oclAsType(PhysicalField), ref.targetField->any(true).oclAsType(PhysicalField).getAbstractPhysicalStructureNotEmbeddedObject()).name.toUpperFirst()/]());
					[for (attr : Attribute | role.entity.identifier.attributes)]
						[if (i=1)]
	filtercolumn = "[getPhysicalName(getMappedPhysicalField(attr, struct, db, role.entity.getMappingRules()))/]";
	filtervalue = [role.entity.name.toLowerFirst()/][role.name.toUpperFirst()/].get[attr.name.toUpperFirst()/]();
						[else]
	logger.error("To implement. Support of multi valued identifiers");
	throw new UnsupportedOperationException("Can't handle multi valued identifiers");
						[/if]
					[/for]
			[/if]
		[/let]
		[/for]
	DBConnectionMgr.updateInTable(filtercolumn, filtervalue, columns, values, "[struct.name/]", "[db.name/]");					
	return true;
	[else]
		[if (struct.oclIsTypeOf(pml::Collection))]
	Bson filter = new Document();
	Bson updateOp;
		[for (rolerel : Role | rel.roles)]
		[let entityType : EntityType = rolerel.entity]
			[for (ref : Reference | getRefOfPhysicalStructure(struct))]
				[let roleref : Role = getMappedRoleOfReference(ref)]
				[if (rolerel=roleref)]
					[if (ref.sourceField->any(true).oclIsTypeOf(ArrayField))]
	updateOp = addToSet("[ref.sourceField->any(true).oclAsType(PhysicalField).getPhysicalName()/]",[getOppositeRoleInBinaryRel(rolerel).entity.name.toLowerFirst()/][getOppositeRoleInBinaryRel(rolerel).name.toUpperFirst()/]==null?null:[getOppositeRoleInBinaryRel(rolerel).entity.name.toLowerFirst()/][getOppositeRoleInBinaryRel(rolerel).name.toUpperFirst()/].get[getMappedAttributeOfFieldInStructure(ref.targetField->any(true).oclAsType(PhysicalField), ref.targetField->any(true).oclAsType(PhysicalField).getAbstractPhysicalStructureNotEmbeddedObject()).name.toUpperFirst()/]());
					[else]
	updateOp = set("[ref.sourceField->any(true).oclAsType(PhysicalField).getPhysicalName()/]",[getOppositeRoleInBinaryRel(rolerel).entity.name.toLowerFirst()/][getOppositeRoleInBinaryRel(rolerel).name.toUpperFirst()/]==null?null:[getOppositeRoleInBinaryRel(rolerel).entity.name.toLowerFirst()/][getOppositeRoleInBinaryRel(rolerel).name.toUpperFirst()/].get[getMappedAttributeOfFieldInStructure(ref.targetField->any(true).oclAsType(PhysicalField), ref.targetField->any(true).oclAsType(PhysicalField).getAbstractPhysicalStructureNotEmbeddedObject()).name.toUpperFirst()/]());
					[/if]
					[for (attr : Attribute | entityType.identifier.attributes)]
						[if (i=1)]
	filter = eq("[getPhysicalName(getMappedPhysicalField(attr, struct, db, entityType.getMappingRules()))/]",[entityType.name.toLowerFirst()/][rolerel.name.toUpperFirst()/].get[attr.name.toUpperFirst()/]());
						[else]
	filter = and(filter,eq("[getPhysicalName(getMappedPhysicalField(attr, struct, db, entityType.getMappingRules()))/]",[entityType.name.toLowerFirst()/][rolerel.name.toUpperFirst()/].get[attr.name.toUpperFirst()/]());
						[/if]
					[/for]
	DBConnectionMgr.update(filter, updateOp, "[struct.name/]", "[db.name/]");
	return true;
				[/if]
				[/let]
			[/for]
		[/let]
		[/for]
		[else]
	[if (struct.oclIsTypeOf(KeyValuePair))]
	throw new UnsupportedOperationException("Not Implemented yet");
	[/if]

	[/if]
	[/if]
}[/template]

