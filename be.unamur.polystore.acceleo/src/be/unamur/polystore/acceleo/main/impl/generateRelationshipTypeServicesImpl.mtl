[comment encoding = UTF-8 /]
[module generateRelationshipTypeServicesImpl('http://www.unamur.be/polystore/Pml')]
[import be::unamur::polystore::acceleo::main::services::select::relationshiptype::generateSelectMethods /]
[import be::unamur::polystore::acceleo::main::services::insert::relationshiptype::generateInsertMethods /]
[import be::unamur::polystore::acceleo::main::services::update::relationshiptype::generateUpdateMethods /]
[import be::unamur::polystore::acceleo::main::services::delete::relationshiptype::generateDeleteMethods /]
[import be::unamur::polystore::acceleo::main::util /]

[template public generateRelationshipTypeServicesImpl(rel: RelationshipType, conceptualSchema: ConceptualSchema)]
[file ('src/main/java/dao/impl/' + rel.name.toUpperFirst() + 'ServiceImpl'.concat('.java'), false, 'UTF-8')]
package dao.impl;

import exceptions.PhysicalStructureException;
import java.util.Arrays;
import java.time.LocalDate;
import java.time.LocalDateTime;
import org.apache.commons.lang3.StringUtils;
[generateImportDataset(rel)/]
import conditions.Condition;
import java.util.HashSet;
import java.util.Set;
import conditions.AndCondition;
import conditions.OrCondition;
import conditions.SimpleCondition;
import conditions.[rel.name.toUpperFirst()/]Attribute;
import conditions.Operator;
import tdo.*;
import pojo.*;
[for (role : Role | rel.roles)]
import tdo.[role.entity.name.toUpperFirst() /]TDO;
import tdo.[rel.name.toUpperFirst()/]TDO;
import conditions.[role.entity.name.toUpperFirst() /]Attribute;
import dao.services.[role.entity.name.toUpperFirst()/]Service;
[/for]
import java.util.List;
import java.util.ArrayList;
import util.ScalaUtil;
import org.apache.spark.api.java.function.MapFunction;
import org.apache.spark.sql.Encoders;
import org.apache.spark.api.java.function.FilterFunction;
import org.apache.commons.lang3.mutable.MutableBoolean;
import util.Util;
import org.apache.commons.lang3.tuple.ImmutablePair;
import org.apache.commons.lang3.tuple.Pair;
[generateImportRow(rel)/]
import org.apache.spark.sql.*;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
[generateImportWrappedArray(rel)/]
import org.apache.spark.api.java.function.FlatMapFunction;
import dbconnection.SparkConnectionMgr;
import dbconnection.DBConnectionMgr;
import org.apache.spark.sql.types.DataTypes;
import org.apache.spark.sql.types.StructField;
import org.apache.spark.sql.types.StructType;
import org.apache.spark.sql.types.ArrayType;
import static com.mongodb.client.model.Updates.addToSet;
import org.bson.Document;
import org.bson.conversions.Bson;
import static com.mongodb.client.model.Filters.eq;
import static com.mongodb.client.model.Updates.*;

public class [rel.name.toUpperFirst() + 'ServiceImpl' /] extends dao.services.[rel.name.toUpperFirst() + 'Service' /] {
	[instantiateLogger(rel.name.toUpperFirst() + 'ServiceImpl') /]
	[generateSelectMethods(rel, conceptualSchema, true) /]
	[generateInsertMethods(rel, true) /]
	[generateUpdateMethods(rel, true) /]
	[generateDeleteMethods(rel, true) /]
}
[/file]
[/template]
